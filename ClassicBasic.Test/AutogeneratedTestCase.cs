// <copyright file="AutogeneratedTestCase.cs" company="Peter Ibbotson">
// (C) Copyright 2017 Peter Ibbotson
// </copyright>

namespace ClassicBasic.Test
{
    using System.Reflection;
    using Microsoft.VisualStudio.TestTools.UnitTesting;

    /// <summary>
    /// Super special case to get rid of the Main() in AutoGeneratedProgram
    /// from the coverage stats by actually executing it via reflection.
    ///
    /// Under normal circumstances this is the sort of thing I wouldn't
    /// write but it finishes off the challenge of getting to 100%
    ///
    /// As it's unclear how long this will be an issue in vstest, so for now we'll
    /// get it via string reflection and call it. As in several other tests to
    /// get all the code blocks covered we use data rows to exercise the null and
    /// not null test class and method info.
    /// </summary>
    [TestClass]
    public class AutogeneratedTestCase
    {
        /// <summary>
        /// Special case to get coverage complete, see above.
        /// </summary>
        /// <param name="typeName">Type name.</param>
        /// <param name="funcName">Function name.</param>
        [DataTestMethod]
        [DataRow("AutoGeneratedProgram", "Main")]
        [DataRow("AutoGeneratedProgram", "Main1")]
        [DataRow("AutoGeneratedProgram1", "Main1")]
        public void RunMainIfExists(string typeName, string funcName)
        {
            Assembly myAssembly = Assembly.GetExecutingAssembly();
            var type = myAssembly.GetType(typeName);
            var main = type?.GetMethod(
                funcName,
                BindingFlags.Static | BindingFlags.NonPublic);
            main?.Invoke(null, new object[] { new string[] { } });
        }
    }
}
